
<style>
/* 通用组件 */

.c-table {
	display: table;
	width: 100%;
}
.c-row {
	display: table-row;
	width: 100%;
}
.c-cell {
	display: table-cell;
	height: 100%;
}

/* 适配内容宽度 */
.c-content-width {
	width: 1px;
	white-space: nowrap;
}
/* 适配内容高度 */
.c-content-height {
	height: 1px;
}

.c-btn {
	box-sizing: border-box;
	cursor: pointer;
	text-align: center;
	transition: opacity 0.1s linear 0s, color 0.1s linear 0s;
	color: #A2A2A2;
}
.c-btn-hover,
.c-btn:hover {
	color: #f45a8d;
}
.c-btn-active,
.c-btn:active {
	color: #fff;
	background-color: #00a1d8;
	outline: solid 1px #0085b3;
}
.c-btn-on {
	color: #585858;
}

.c-slider {
	box-sizing: border-box;
	cursor: pointer;
	position: relative;
	overflow: hidden;
	border-radius: 6px;
	height: 6px;
	background: #949494;
}
.c-slider-fill {
	box-sizing: border-box;
	position: absolute;
	top: 0;
	height: 100%;
	border-radius: 6px;
	background: #00a0d8;
}
.c-slider-fill-dark {
	background: #007bb1;
}

.c-input {
	box-sizing: border-box;
	box-shadow: inset 0 5px 10px rgba(0,0,0,.07);
	transition: box-shadow .2s ease-in-out;
	border: 0;
	outline: none;
	color: #666;
}
.c-input:focus {
	box-shadow: inset 0 5px 5px rgba(0,0,0,.1);
}

.c-text-btn {
	box-sizing: border-box;
	cursor: pointer;
	-moz-user-select: none;
	-webkit-user-select: none;
	user-select: none;
	color: #fff;
	text-align: center;
	transition: all .2s ease-in-out;
	border: solid 1px #0085b3;
	background-color: #00a1d8;
}
.c-text-btn:hover {
	background-color: #00ace3;
}
.c-text-btn:active {
	box-shadow: inset 0 0 5px #0085b3;
	background-color: #00a1d8;
}

.c-separator {
	width: 1px;
	background-color: #ececec;
}

.c-loader {
	-webkit-animation: spin 1.2s linear infinite;
	animation: spin 1.2s linear infinite;
	border-radius: 50%;
	border-style: solid;
	border-color: rgba(255,255,255,.5);
	border-top-color: rgba(127,127,127,.5);
	border-width: 8px;
	width: 64px;
	height: 64px;
}
@-webkit-keyframes spin {
	0% { 
		-webkit-transform: rotate(0deg);
		-ms-transform: rotate(0deg);
		transform: rotate(0deg);
	}
	100% {
		-webkit-transform: rotate(360deg);
		-ms-transform: rotate(360deg);
		transform: rotate(360deg);
	}
}
@keyframes spin {
	0% {
		-webkit-transform: rotate(0deg);
		-ms-transform: rotate(0deg);
		transform: rotate(0deg);
	}
	100% {
		-webkit-transform: rotate(360deg);
		-ms-transform: rotate(360deg);
		transform: rotate(360deg);
	}
}

.c-dlg {
	box-sizing: border-box;
	position: absolute;
	padding: 10px;
	border-radius: 5px;
	transition: all 0.1s ease-in-out;
	box-shadow: 0 0 10px rgba(0,0,0,.2);
	background: rgba(255,255,255,.9);
	z-index: 1;
}
.c-dlg-title {
	display: block;
	margin: 0;
	text-align: left;
	color: #666;
	font-weight: bold;
	font-size: 12px;
}

.c-dlg-btn-group {
	display: block;
	text-align: center;
}
.c-dlg-btn {
	box-sizing: border-box;
	display: inline-block;
	border-radius: 5px;
	border: solid 2px;
	cursor: pointer;
	transition: all 0.1s ease-in-out;
	color: #a2a2a2;
	text-align: center;
	font-size: 10px;
}
.c-dlg-btn:hover {
	color: #666;
}
.c-dlg-btn-group input {
	appearance: none;
	-webkit-appearance: none;
	outline: none;
	display: none
}
.c-dlg-btn-group input:checked ~ .c-dlg-btn,
.c-dlg-btn-on {
	color: #fff;
	background-color: #666;
	border-color: #666;
}
.c-dlg-btn-group input:checked ~ .c-dlg-btn:hover,
.c-dlg-btn-on:hover {
	color: #fff;
}

/* end 通用组件 */


.ab-player {
	position: relative;
	background: #000;
}

.ab-video .c-cell {
	vertical-align: middle;
}

.ab-video video {
	background: #000;
}

.ab-control {
	background: #fff;
	font-size: 14px;
}

.ab-control-bar {
	height: 20px;
	border-bottom: 1px solid #ececec;
}

.ab-control-bar .c-cell {
	vertical-align: middle;
}

.ab-control-bar .c-btn {
	display: inline-block;
	line-height: 20px;
	width: 25px;
	height: 100%;
}

.ab-control-bar .c-slider {
	margin: 0 4px;
}

.ab-control-bar .ab-play-btn {
	width: 35px;
}

.ab-control-bar .ab-time-label {
	text-align: center;
	font-size: 11px;
}

.ab-control-bar .ab-time-label span {
	display: inline-block;
}

.ab-control-bar .ab-time-label-current,
.ab-control-bar .ab-time-label-total {
	width: 36px;
}

.ab-control-bar .ab-volume-bar {
	width: 60px;
}

.ab-control-bar .ab-font-btn {
	width: 40px;
}

.ab-control-bar .ab-color-btn {
	width: 40px;
}

.ab-control-bar .ab-send-btn {
	border-top: none;
	width: 58px;
	height: 100%;
	padding-top: 2px;
	font-size: 12px;
}

.ab-control-bar .ab-danmaku-input {
	display: block;
	width: 100%;
	height: 100%;
	padding: 2px 4px;
	font-size: 12px;
}

.ab-player {
	height: 420px;
}

@media (max-width: 640px) {
	.ab-control-bar .ab-volume-bar {
		display: none !important;
	}
	.ab-control-bar .ab-send-btn {
		width: 40px;
	}

	.ab-player {
		height: 360px;
	}
}

@media (max-width: 480px) {
	.ab-control-bar .ab-time-label-separator,
	.ab-control-bar .ab-time-label-total {
		display: none !important;
	}
	.ab-control-bar .ab-volume-btn {
		display: none !important;
	}

	.ab-player {
		height: 240px;
	}
}






.ab-font-dlg {
	width: 220px;
	height: 160px;
	left: 5px;
	bottom: 30px;
	visibility: hidden;
}

.ab-font-dlg .c-dlg-btn {
	width: 60px;
	height: 44px;
	line-height: 64px;
	vertical-align: middle;
	overflow: hidden;
	margin: 2px auto;
}

.ab-color-dlg {
	width: 206px;
	height: 201px;
	left: 5px;
	bottom: 30px;
	padding: 0;
	visibility: hidden;
}

.ab-color-dlg .colpick {
	width: 100%;
	height: 100%;
	border: 0;
	background: transparent;
}

.ab-loader {
	box-sizing: border-box;
	position: absolute;
	left: 50%;
	top: 50%;
	width: 80px;
	height: 80px;
	margin-left: -40px;
	margin-top: -40px;
	z-index: 1;
	visibility: hidden;
}

.ab-circle-play-btn {
	cursor: pointer;
	box-sizing: border-box;
	position: absolute;
	border-radius: 50%;
	border-style: solid;
	border-color: rgba(255,255,255,.5);
	border-width: 8px;
	left: 50%;
	top: 50%;
	width: 80px;
	height: 80px;
	margin-left: -40px;
	margin-top: -40px;
	z-index: 1;
}

.ab-circle-play-btn-inner {
	box-sizing: content-box;
	position: absolute;
	width: 0;
	height: 0;
	border-style: solid;
	border-color: rgba(255,255,255,.5);
	border-top-color: transparent;
	border-bottom-color: transparent;
	border-right: 0;
	border-left-width: 34px;
	border-top-width: 20px;
	border-bottom-width: 20px;
	top: 50%;
	left: 50%;
	margin-top: -20px;
	margin-left: -12px;
}

</style>

<script>
var ABP = {};

(function() {
	'use strict';
	function Emitter(scope) {
		this.events = {};
		this.scope = scope;
	};

	Emitter.prototype.on = function(eventName, listenerFunction) {
		this.events[eventName] = listenerFunction;
	};

	Emitter.prototype.off = function(eventName) {
		delete this.events[eventName];
	};

	Emitter.prototype.emit = function(eventName) {
		var listenerFunction = this.events[eventName];
		if (listenerFunction) {
			var args = [].slice.call(arguments, 1);
			return listenerFunction.apply(this.scope, args);
		}
	};

	ABP.Emitter = Emitter;
})();

(function() {
	'use strict';
	var Util = {};

	Util.intPad = function(str, len) {
		str = str + '';
		len = len - str.length;
		if (len <= 0) return str;
		var pad = '';
		for (var i = 0; i < len; i++) {
			pad += '0';
		}
		return pad + str;
	};

	Util.formatTime = function(time) {
		if (isNaN(time)) return '00:00';
		return Util.intPad(parseInt(time / 60), 2) + ':' + Util.intPad(parseInt(time % 60), 2);
	};

	ABP.Util = Util;
})();

(function() {
	'use strict';
	function Player(htmlElement) {
		var $player = $(htmlElement);
		this.$$ = function(selector) {
			return $player.find(selector);
		};

		this.video = this.$$('.ab-video video')[0];

		// 弹幕管理器初始化
		this.cm = new CommentManager(this.$$('.ccl .ccl-container')[0]);
		this.cm.init();
		// end 弹幕管理器初始化

		// 事件发射器
		this.emitter = new ABP.Emitter(this);
		// end 事件发射器

		// 初始状态
		this.isPlaying = false;
		this.danmakuEnabled = true;
		this.videoLoaded = false;
		this.danmakuColor = 0xffffff;
		// end 初始状态

		this._init();
	};

	// 添加/覆盖事件
	Player.prototype.on = function(eventName, listenerFunction) {
		this.emitter.on(eventName, listenerFunction);
	};

	// 移除事件
	Player.prototype.off = function(eventName) {
		this.emitter.off(eventName);
	};

	Player.prototype.togglePlay = function() {
		if (!this.videoLoaded) {
			this.emitter.emit('requireVideo', function() {
				this._togglePlay();
			}.bind(this));
		} else {
			this._togglePlay();
		}
	};

	Player.prototype.toggleLoop = function() {
		this._toggleLoop();
	};

	Player.prototype.toggleDanmaku = function() {
		this._toggleDanmaku();
	};

	Player.prototype.toggleMute = function() {
		this._toggleMute();
	};

	Player.prototype.seek = function(seconds) {
		if (!this.videoLoaded) {
			this.emitter.emit('requireVideo', function() {
				this._seek(seconds);
			}.bind(this));
		} else {
			this._seek(seconds);
		}
	};

	Player.prototype.loadDanmaku = function(danmakuArray) {
		this.cm.load(danmakuArray);
	};

	Player.prototype.setSource = function(url) {
		this.video.src = url;
	};

	Player.prototype.setPoster = function(url) {
		this.video.poster = url;
	};

	Player.prototype.showLoader = function() {
		this.$loader.css('visibility', 'visible');
	};

	Player.prototype.hideLoader = function() {
		this.$loader.css('visibility', 'hidden');
	};


	// ------ 私有方法 ------

	Player.prototype._init = function() {
		this.$playBtn = this.$$('.ab-control .ab-play-btn');
		this.$playIcon = this.$playBtn.children('i');

		this.$loopBtn = this.$$('.ab-control .ab-loop-btn');

		this.$danmakuBtn = this.$$('.ab-control .ab-danmaku-btn');

		this.$volumeBtn = this.$$('.ab-control .ab-volume-btn');
		this.$volumeIcon = this.$volumeBtn.children('i');
		this.$volumeBar = this.$$('.ab-control .ab-volume-bar');
		this.$volumeProgress = this.$volumeBar.children('div');
		this._updateVolumeIcon();
		this._updateVolumeBar();

		this.$seekbar = this.$$('.ab-control .ab-seekbar');
		this.$seekbarProgress = this.$seekbar.children('div');

		this.$timeLabel = this.$$('.ab-control .ab-time-label');
		this.$currentTimeLabel = this.$timeLabel.children('.ab-time-label-current');
		this.$durationLabel = this.$timeLabel.children('.ab-time-label-total');

		this.$sendBtn = this.$$('.ab-control .ab-send-btn');
		this.$danmakuInput = this.$$('.ab-control .ab-danmaku-input');

		this.$fontBtn = this.$$('.ab-font-btn');
		this.$colorBtn = this.$$('.ab-color-btn');
		this.$fontDlg = this.$$('.ab-font-dlg');
		this.$colorDlg = this.$$('.ab-color-dlg');

		this.$loader = this.$$('.ab-loader');

		this.$circlePlayBtn = this.$$('.ab-circle-play-btn');

		this._bindEvents();
	};

	Player.prototype._bindEvents = function() {
		var self = this;
		this.$playBtn.click(function() {
			self.$circlePlayBtn.hide();
			self.togglePlay();
		});
		this.$circlePlayBtn.click(function() {
			self.$circlePlayBtn.hide();
			self.togglePlay();
		});

		this.$loopBtn.click(function() {
			self.toggleLoop();
		});
		this.$danmakuBtn.click(function() {
			self.toggleDanmaku();
		});
		this.$volumeBtn.click(function() {
			self.toggleMute();
		});

		this.$fontBtn.click(function() {
			self._toggleFontDialog();
		});
		this.$colorBtn.click(function() {
			self._toggleColorDialog();
		});
		this.$colorDlg.colpick({
			flat: true,
			color: 'ffffff',
			layout:'hex',
			onChange: function(hsb, hex) {
				self.danmakuColor = Number('0x' + hex);
			},
			onSubmit: function() {
				self._toggleColorDialog();
			}
		});

		this.$volumeBar.click(function(e) {
			var progress = (e.clientX - self.$volumeBar.offset().left) / self.$volumeBar.width();
			if (progress < 0) progress = 0;
			if (progress > 1) progress = 1;
			self.video.volume = progress;
		});

		this.$seekbar.click(function(e) {
			self.$circlePlayBtn.hide();
			var progress = (e.clientX - self.$seekbar.offset().left) / self.$seekbar.width();
			if (progress < 0) progress = 0;
			if (progress > 1) progress = 1;
			self.seek(self.video.duration * progress);
		});

		this.$sendBtn.click(function() {
			self._sendButtonClick();
		});

		this.video.onplaying = function() {
			//console.log('playing');
			self.$playIcon.attr('class', 'c-icon-pause');
			if (self.danmakuEnabled) self.cm.start();
			self.isPlaying = true;
		};
		this.video.onpause = function() {
			self.$playIcon.attr('class', 'c-icon-play');
			if (self.danmakuEnabled) self.cm.stop();
			self.isPlaying = false;
		};
		this.video.onvolumechange = function() {
			self._updateVolumeIcon();
			self._updateVolumeBar();
		};
		this.video.ontimeupdate = function() {
			self._updateDanmakuStage();
			self._updateSeekbar();
			self._updateCurrentTimeLabel();
		};
		this.video.onloadedmetadata = function() {
			self.videoLoaded = true;
			self._updateSeekbar();
			self._updateDurationLabel();
		};

		this.video.onseeking = function() {
			//console.log('seeking');
			self.showLoader();
		};
		this.video.onseeked = function() {
			//console.log('seeked');
			self.hideLoader();
		};

		this.video.onwaiting = function() {
			//console.log('waiting');
			self.showLoader();
		};
		this.video.oncanplay = function() {
			//console.log('canplay');
			self.hideLoader();
		};
	};

	Player.prototype._togglePlay = function() {
		if (this.isPlaying) {
			this.video.pause();
		} else {
			this.video.play();
		}
	};

	Player.prototype._toggleLoop = function() {
		if (this.video.loop) {
			this.$loopBtn.removeClass('c-btn-on');
			this.video.loop = false;
		} else {
			this.$loopBtn.addClass('c-btn-on');
			this.video.loop = true;
		}
	};

	Player.prototype._toggleDanmaku = function() {
		if (this.danmakuEnabled) {
			this.cm.stop();
			this.cm.clear();
			this.$danmakuBtn.removeClass('c-btn-on');
			this.danmakuEnabled = false;
		} else {
			this.cm.start();
			this.$danmakuBtn.addClass('c-btn-on');
			this.danmakuEnabled = true;
		}
	};

	Player.prototype._toggleMute = function() {
		if (this.video.muted) {
			this.video.muted = false;
		} else {
			this.video.muted = true;
		}
		this._updateVolumeIcon();
	};

	Player.prototype._seek = function(seconds) {
		if (!isNaN(seconds)) this.video.currentTime = seconds;
		if (this.video.paused) this.video.play();
	};

	Player.prototype._updateVolumeIcon = function() {
		if (this.video.muted) {
			this.$volumeIcon.attr('class', 'c-icon-volume-mute');
		}
		else if (this.video.volume < .10) {
			this.$volumeIcon.attr('class', 'c-icon-volume-quiet');
		}
		else if (this.video.volume < .33) {
			this.$volumeIcon.attr('class', 'c-icon-volume-low');
		}
		else if (this.video.volume < .67) {
			this.$volumeIcon.attr('class', 'c-icon-volume-medium');
		}
		else {
			this.$volumeIcon.attr('class', 'c-icon-volume-high');
		}
	};

	Player.prototype._updateVolumeBar = function() {
		this.$volumeProgress.css('width', (this.video.volume * 100) + '%');
	};

	Player.prototype._updateSeekbar = function() {
		var width = (this.video.currentTime / this.video.duration * 100) + '%';
		this.$seekbarProgress.css('width', width);
	};

	Player.prototype._updateCurrentTimeLabel = function() {
		this.$currentTimeLabel.text(ABP.Util.formatTime(this.video.currentTime));
	};

	Player.prototype._updateDurationLabel = function() {
		this.$durationLabel.text(ABP.Util.formatTime(this.video.duration));
	};

	Player.prototype._updateDanmakuStage = function() {
		this.cm.time(Math.floor(this.video.currentTime * 1000));
	};

	Player.prototype._sendDanmaku = function(text, mode, size, color) {
		text = text.trim();
		if (!text) return;

		// 1:滚动字幕 4:底端渐隐 5:顶端渐隐
		mode = parseInt(mode);
		if (mode !== 4 && mode !== 5) mode = 1;

		// 18:小字号 25:中字号
		size = parseInt(size);
		if (size !== 18) size = 25;

		color = parseInt(color);
		if (isNaN(color) || color > 0xffffff) color = 0xffffff;
		if (color < 0) color = 0;

		var danmaku = {
			text: text,
			mode: mode,
			size: size,
			color: color,
			stime: Math.floor(this.video.currentTime * 1000)
		}

		// 如果 emit 'sendDanmaku' 返回 true 则直接取消, 不显示也不插入
		var cancelled = this.emitter.emit('sendDanmaku', danmaku, function() {
			if (cancelled) return;
			this._insertDanmaku(danmaku); // 回调之后才真正插入到时间轴
		}.bind(this));

		if (cancelled) return;
		this._presentDanmaku(danmaku); // 立刻显示刚才的弹幕, 此时还不会插入到时间轴
	};

	Player.prototype._presentDanmaku = function(danmaku) {
		danmaku.border = true;
		this.cm.send(danmaku); // 仅显示
	};

	Player.prototype._insertDanmaku = function(danmaku) {
		danmaku.border = false;
		this.cm.insert(danmaku); // 插入到时间轴
	};


	Player.prototype._sendButtonClick = function() {
		if (!this.videoLoaded) return;
		this._sendDanmaku(
			this.$danmakuInput.val(),
			this.$$('input[name="abp-danmaku-mode"]:checked').val(),
			this.$$('input[name="abp-danmaku-size"]:checked').val(),
			this.danmakuColor
		);
		this.$danmakuInput.val('');
	};

	Player.prototype._toggleFontDialog = function() {
		if (this.$fontDlg.css('visibility') == 'hidden') {
			this.$fontDlg.css('visibility', 'visible');
			this.$fontBtn.addClass('c-btn-hover');
		} else {
			this.$fontDlg.css('visibility', 'hidden');
			this.$fontBtn.removeClass('c-btn-hover');
		}
	};

	Player.prototype._toggleColorDialog = function() {
		if (this.$colorDlg.css('visibility') == 'hidden') {
			this.$colorDlg.css('visibility', 'visible');
			this.$colorBtn.addClass('c-btn-hover');
		} else {
			this.$colorDlg.css('visibility', 'hidden');
			this.$colorBtn.removeClass('c-btn-hover');
		}
	};

	// ------ end 私有方法 ------

	ABP.Player = Player;
})();
</script>


<div class="c-table ab-player">
	<div class="c-row ab-video">
		<div class="c-cell ccl">
			<div class="ccl-container"></div>
			<video width="100%">Your browser does not support HTML5 video.</video>
			<div class="c-loader ab-loader"></div>
			<div class="ab-circle-play-btn">
				<div class="ab-circle-play-btn-inner"></div>
			</div>
		</div>
	</div>

	<div class="c-row c-content-height ab-control">
		<!-- 控制条第一行 -->
		<div class="c-table ab-control-bar">
			<div class="c-cell c-content-width"><!-- 播放按钮
				--><span class="c-btn ab-play-btn"><i class="c-icon-play"></i></span><!--
			--></div>
			<div class="c-cell c-separator"></div>
			<div class="c-cell"><!-- 进度条 宽度自适应 -->
				<div class="c-slider ab-seekbar">
					<!--<div class="c-slider-fill"></div>-->
					<div class="c-slider-fill c-slider-fill-dark"></div>
				</div>
			</div>
			<div class="c-cell c-content-width"><!-- 时间 -->
				<div class="ab-time-label"><!--
					--><span class="ab-time-label-current">00:00</span><!--
					--><span class="ab-time-label-separator"> / </span><!--
					--><span class="ab-time-label-total">00:00</span><!--
				--></div>
			</div>
			<div class="c-cell c-content-width"><!-- 音量按钮
				--><span class="c-btn ab-volume-btn"><i class="c-icon-volume-high"></i></span><!--
			--></div>
			<div class="c-cell c-content-width"><!-- 音量调节 -->
				<div class="c-slider ab-volume-bar">
					<div class="c-slider-fill"></div>
				</div>
			</div>
			<div class="c-cell c-content-width"><!-- 选项按钮
				--><span class="c-btn c-btn-on ab-danmaku-btn"><i class="c-icon-comment"></i></span><!--
				--><span class="c-btn ab-loop-btn"><i class="c-icon-loop"></i></span><!--
				--><span class="c-btn ab-settings-btn"><i class="c-icon-gear"></i></span><!--
				--><span class="c-btn ab-fullscreen-btn"><i class="c-icon-screen-full"></i></span><!--
			--></div>
		</div>
		<!-- end 控制条第一行 -->
		<!-- 控制条第二行 -->
		<div class="c-table ab-control-bar">
			<div class="c-cell c-content-width"><!-- 弹幕选项按钮
				--><span class="c-btn ab-font-btn"><i class="c-icon-font-style"></i></span><!--
				--><span class="c-btn ab-color-btn"><i class="c-icon-color-mode"></i></span><!--
			--></div>
			<div class="c-cell"><!-- 弹幕输入框 宽度自适应
				--><input type="text" class="c-input ab-danmaku-input"><!-- 
			--></div>
			<div class="c-cell c-content-width"><!-- 弹幕发送按钮-->
				<div class="c-text-btn ab-send-btn">发送</div>
			</div>
		</div>
		<!-- end 控制条第二行 -->
	</div>

	<div class="c-dlg ab-font-dlg">
		<p class="c-dlg-title">弹幕字号</p>
		<div class="c-dlg-btn-group">
			<label><input type="radio" value="18" name="abp-danmaku-size"><span class="c-dlg-btn">小字号</span></label>
			<label><input type="radio" value="25" name="abp-danmaku-size" checked="checked"><span class="c-dlg-btn">中字号</span></label>
		</div>
		<p class="c-dlg-title">弹幕模式</p>
		<div class="c-dlg-btn-group">
			<label><input type="radio" value="5" name="abp-danmaku-mode"><span class="c-dlg-btn">顶端渐隐</span></label>
			<label><input type="radio" value="1" name="abp-danmaku-mode" checked="checked"><span class="c-dlg-btn">滚动字幕</span></label>
			<label><input type="radio" value="4" name="abp-danmaku-mode"><span class="c-dlg-btn">底端渐隐</span></label>
		</div>
	</div>

	<div class="c-dlg ab-color-dlg"></div>
</div>






